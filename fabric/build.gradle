plugins {
	id "com.github.johnrengelman.shadow"
}

architectury {
	platformSetupLoomIde()
	fabric()
}

repositories {
	maven {
		name = "TerraformersMC"
		url = uri("https://maven.terraformersmc.com/releases")
	}
}

loom {
	mixin {
		defaultRefmapName = "worldcomment.fabric.refmap.json"
	}
}

configurations {
	common
	shadowCommon
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentFabric.extendsFrom common
}

dependencies {
	modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
	modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

	common(project(path: ":common", configuration: "namedElements")) { transitive false }
	shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

	if (rootProject.minecraft_version_int >= 12001) {
		modImplementation "io.wispforest:accessories-fabric:${rootProject.accessories_version}"
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand (
			"version": project.version,
			"minecraft_version": rootProject.supports_minecraft_version
		)
	}
}

shadowJar {
	exclude "*.bmp"

	configurations = [project.configurations.shadowCommon]
	archiveClassifier = "dev-shadow"

	dependencies {
		it.exclude it.dependency('io.netty:.*')
	}
	relocate "reactor", "vendor.cn.zbx1425.worldcomment.reactor"
	relocate "io.lettuce", "vendor.cn.zbx1425.worldcomment.io.lettuce"
	relocate "org.reactivestreams", "vendor.cn.zbx1425.worldcomment.org.reactivestreams"
}

remapJar {
	input.set shadowJar.archiveFile
	dependsOn shadowJar
	archiveClassifier = null
}

components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}

afterEvaluate {
	for (def task in it.tasks) {
		if (task == tasks.build) {
			if (System.env.GITHUB_ACTIONS) {
				task.dependsOn rootProject.tasks.setupLibrary
			}
		}
	}
}
