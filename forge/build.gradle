plugins {
	id "com.github.johnrengelman.shadow"
}

loom {
	forge {
		mixinConfig "worldcomment.mixins.json"
	}
}

architectury {
	platformSetupLoomIde()
	forge()
}

configurations {
	common
	shadowCommon
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentForge.extendsFrom common
}

dependencies {
	forge "net.minecraftforge:forge:${rootProject.forge_version}"
	modApi "${rootProject.architectury_id}:architectury-forge:${rootProject.architectury_version}"

	forgeRuntimeLibrary 'io.lettuce:lettuce-core:6.2.3.RELEASE'

	common(project(path: ":common", configuration: "namedElements")) { transitive false }
	shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

	if (rootProject.minecraft_version_int >= 12001) {
		modImplementation "io.wispforest:accessories-neoforge:${rootProject.accessories_version}"
		forgeRuntimeLibrary "blue.endless:jankson:1.2.2"
		forgeRuntimeLibrary "io.wispforest:endec:0.1.9"
		forgeRuntimeLibrary "io.wispforest.endec:gson:0.1.5"
		forgeRuntimeLibrary "io.wispforest.endec:jankson:0.1.6"
		forgeRuntimeLibrary "io.wispforest.endec:netty:0.1.4"
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("META-INF/mods.toml") {
		expand (
			"version": project.version,
			"minecraft_version_range": rootProject.supports_minecraft_version_range
		)
	}
}

shadowJar {
	exclude "fabric.mod.json"
	exclude "*.bmp"

	configurations = [project.configurations.shadowCommon]
	archiveClassifier = "dev-shadow"

	dependencies {
		it.exclude it.dependency('io.netty:.*')
	}
	relocate "reactor", "vendor.cn.zbx1425.worldcomment.reactor"
	relocate "io.lettuce", "vendor.cn.zbx1425.worldcomment.io.lettuce"
	relocate "org.reactivestreams", "vendor.cn.zbx1425.worldcomment.org.reactivestreams"
}

remapJar {
	input.set shadowJar.archiveFile
	dependsOn shadowJar
	archiveClassifier = null
}

components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}

repositories {
	maven { url "https://maven.minecraftforge.net/" }
}

afterEvaluate {
	for (def task in it.tasks) {
		if (task == tasks.build) {
			if (System.env.GITHUB_ACTIONS) {
				task.dependsOn rootProject.tasks.setupLibrary
			}
		}
	}
}
